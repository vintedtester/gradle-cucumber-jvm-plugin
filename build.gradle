plugins {
    id 'groovy'
    id 'codenarc'
    id 'com.bmuschko.clover' version '2.2.4'
    id 'nebula.integtest' version '7.0.4'
    id 'idea'
    id 'maven-publish'
    id 'net.researchgate.release' version '2.8.1'
    id "com.jfrog.bintray" version "1.8.4"
    id 'com.gradle.plugin-publish' version '0.10.1'
    id 'com.github.ben-manes.versions' version '0.27.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compileOnly gradleApi()

    implementation 'org.codehaus.gpars:gpars:1.2.1'
    implementation 'org.zeroturnaround:zt-exec:1.11'
    implementation 'net.masterthought:cucumber-reporting:4.11.2'

    testImplementation gradleApi()
    testImplementation 'com.netflix.nebula:nebula-test:7.6.0'

    integTestImplementation gradleApi()
    integTestImplementation 'com.netflix.nebula:nebula-test:7.6.0'

    clover 'org.openclover:clover:4.4.1'
}

codenarc {
    configFile = rootProject.file('codenarcrule.groovy')
    reportFormat = System.properties['codeNarcOutput'] ?: 'html'
    maxPriority2Violations = Integer.MAX_VALUE
    maxPriority3Violations = Integer.MAX_VALUE
}

clover {
    report {
        xml = true
        html = true
    }
}

test {
    finalizedBy cloverGenerateReport
}

integrationTest {
    finalizedBy cloverGenerateReport
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar, jar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
    repositories {
        maven {
            credentials {
                username = System.getenv("NEXUS_USERNAME")
                password = System.getenv("NEXUS_PASSWORD")
            }

            setUrl("https://nexus.vinted.net/repository/maven-hosted-oom/")
        }
    }
}

bintray {
    user = project.hasProperty("bintrayUserName") ? bintrayUserName : null
    key = project.hasProperty("bintrayApiKey") ? bintrayApiKey : null
    publications = ["mavenJava"]
    pkg {
        repo = project.hasProperty("bintrayRepo") ? bintrayRepo : "main"
        userOrg = project.hasProperty("bintrayUserOrg") ? bintrayUserOrg : "commercehub-oss"
        name = 'gradle-cucumber-jvm-plugin'
        licenses = ["Apache-2.0"]
        vcsUrl = 'https://github.com/commercehub-oss/gradle-cucumber-jvm-plugin'
    }
}

bintrayUpload.dependsOn build, sourcesJar, javadocJar
createReleaseTag.dependsOn bintrayUpload
createReleaseTag.dependsOn publishPlugins

pluginBundle {
    website = "https://github.com/double16/gradle-cucumber-jvm-plugin"
    vcsUrl = "https://github.com/double16/gradle-cucumber-jvm-plugin"
    description = "The gradle cucumber-jvm plugin provides the ability to run cucumber acceptance tests directly from a Gradle build."
    tags = ["cucumber", "java", "testing"]
    plugins {
        cucumberJvm {
            id = "com.patdouble.cucumber-jvm"
            displayName = "Cucumber-JVM Plugin"
        }
    }
    mavenCoordinates {
        groupId = "com.patdouble"
        artifactId = "gradle-cucumber-jvm-plugin"
    }
}
